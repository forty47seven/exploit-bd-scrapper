from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.contrib.auth.models import User
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages

from .models import Papers

from .webscrapper import recent, multi_search, search_download, get_paper_info, download

url = 'https://www.exploit-db.com/'

def home_page(request):
    context = {}
    return render(request, 'base/home.html', context)

@login_required(login_url='login_page')
def user_page(request):
    context = {}
    if request.method == 'POST' and request.POST.get('check1') == 'quick_search':
        search_key = request.POST.get('search_key')

        context = search_download(search_key=search_key)
    
    if request.method == 'POST' and request.POST.get('check2') == 'multi_search':
        search_key = request.POST.get('multi_search_key')

        search_check = multi_search(search_key=search_key)
        if search_check == 0:
            pass
        else:
            context = search_check

    if request.method == 'POST' and request.POST.get('check3') == 'recent':
        num = request.POST.get('num')

        recent_dict = recent(num=num)
        context = recent_dict

    return render(request, 'base/user.html', context)

'''
@login_required(login_url='login_page')
def control_page(request):
    if request.method == 'POST':
        num = int(request.POST.get('num'))
        paper_info = get_paper_info(num)
        for paper in paper_info:
            download(paper['title'], paper['file_index'])
            p = Papers(
                title=paper['title'],
                author=paper['author'],
                paper_type=paper['paper type'],
                platform=paper['platform'],
                file_index=paper['download_link']
            )
            p.save()

    return render(request, 'base/control.html')
'''

def bucket_link(title:str):
    title_list = title.split()
    title = title_list[0]
    if len(title_list) > 1:
        for i in range(len(title_list)-1):
            title = title + "%20" + title_list[i+1]

    download_link = f"https://storage.googleapis.com/forty7_bucket/papers/{title}"
    return download_link

@login_required(login_url='login_page')
def download_page(request):
    papers = Papers.objects.all()

    titles = []
    authors = []
    paper_types = []
    platforms = []
    download_links = []
    bucket_download_links = []

    for paper in papers:
        titles.append(paper.title)
        authors.append(paper.author)
        paper_types.append(paper.paper_type)
        platforms.append(paper.platform)
        download_links.append(paper.file_index)
        
        bucket_download_link = bucket_link(paper.title)
        bucket_download_links.append(bucket_download_link)


    my_papers = zip(titles, authors, paper_types, platforms, download_links, bucket_download_links)
    context = {'my_papers': my_papers}
    return render(request, 'base/server.html', context)

def login_page(request):
    page = 'login'
    if request.method == 'POST':
        username = request.POST.get('username').lower()
        password = request.POST.get('password')

        check = True
        try:
            user = User.objects.get(username=username)
        except:
            check = False
            messages.error(request, 'User does not Exist')
        
        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            return redirect('user_page')
        elif check:
            messages.error(request, 'Incorrect Password')
    context = {'page': page}
    return render(request, 'base/login_register.html', context)

def logout_page(request):
    logout(request)
    return redirect('home_page')

def reg_page(request):
    form = UserCreationForm()

    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.username = user.username.lower()
            user.save()
            login(request, user)
            return redirect('user_page')
        else:
            messages.error(request, 'Sorry, an error occurred')

    context = {'form': form}
    return render(request, 'base/login_register.html', context)
